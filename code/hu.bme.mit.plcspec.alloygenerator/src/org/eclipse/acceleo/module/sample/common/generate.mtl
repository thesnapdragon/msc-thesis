[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore', 'http://cern.ch/enice/plcspec/1.0')]


[template public generateElement(sm : StatemachineModule)]

[comment @main/]
[file ('psm_transitioncoverage.als', false, 'UTF-8')]
module psm_statecoverage

abstract sig State {}
abstract sig Transition {from, to: one State}

one sig Initial, End extends State {}

one sig [for (state : AbstractState | sm.rootState.containedStates) separator (', ')][state.name/][/for]extends State {}

[for (transition : Transition | sm.transitions) separator('\n')]
one sig [transition.name/] extends Transition {}{
	from = [transition.from.name /]
	to = [transition.to.name /]
}
[/for]

sig Path { firstStep: Step }
sig Step {
	from, to: State,
	via: Transition,
	nextStep: lone Step
} {
	via.from = from
	via.to = to
}

fact {
	all s:Step, p:Path | s in p.firstStep.*nextStep
	all p:Path | p.firstStep.from = Initial
	all curr:Step, next:curr.nextStep | next.from = curr.to
}

fun steps (p:Path): set Step {
	p.firstStep.*nextStep
}

pred transition_coverage() {
	some p:Path | steps[ '[' /]p[ ']' /].via = Transition
}

pred state_coverage() {
	some p:Path | all s:State | s in steps[ '[' /]p[ ']' /].from or  s in steps[ '[' /]p[ ']' /].to
}

run transition_coverage for 10 but exactly 1 Path


[/file]

[/template]
