[comment encoding = UTF-8 /]
[module generateAlloy('http://www.eclipse.org/emf/2002/Ecore', 'http://cern.ch/enice/plcspec/1.0')]

[template public generateStateCoverage(sm : StatemachineModule)]
[comment @main/]
[file ('statecoverage.als', false, 'UTF-8')]
module statecoverage
[generateImports() /]

[generateMetamodel() /]
[generateFunctions() /]
[generateFacts() /]
[generateInheritSystem() /]
/*** GENERATED CODE START ***/
[generateStates(sm) /]
[generateSystem(sm) /]
[generateTransitions(sm, false) /]
[generateInitSystem(sm) /]
/*** GENERATED CODE END ***/
pred state_coverage() {
	all s:State | some p:Path | s in steps['[' /]p[']' /].from + steps['[' /]p[']' /].to
}
run state_coverage for 10 but exactly 1 Coverage, [sm.rootState.containedStates->size() - 2 /] System
[/file]
[/template]


[template public generateTransitionCoverage(sm : StatemachineModule)]
[comment @main/]
[file ('transitioncoverage.als', false, 'UTF-8')]
module transitioncoverage
[generateImports() /]

[generateMetamodel() /]
[generateFunctions() /]
[generateFacts() /]
[generateInheritSystem() /]
/*** GENERATED CODE START ***/
[generateStates(sm) /]
[generateSystem(sm) /]
[generateTransitions(sm, true) /]
[generateInitSystem(sm) /]
/*** GENERATED CODE END ***/
pred transition_coverage() {
	all t:Transition | some p:Path | t in steps['[' /]p[']' /].via
}
run transition_coverage for 10 but exactly 1 Coverage, [sm.rootState.containedStates->size() - 2 /] System
[/file]
[/template]


[template public generateImports(traceabilityContext : OclAny)]
open util/integer
open util/boolean
[/template]


[template public generateMetamodel(traceabilityContext : OclAny)]
abstract sig System {}
abstract sig State {system: one System}
abstract sig Transition {from, to: one State}

sig Coverage { paths: some Path }
sig Path { firstStep: one Step }
sig Step {
	from, to: one State,
	via: one Transition,
	nextStep: lone Step
} {
	via.from = from
	via.to = to
}
[/template]


[template public generateFunctions(traceabilityContext : OclAny)]
fun steps (p:Path): set Step {
	p.firstStep.*nextStep
}
fun transitions (p:Path): set Transition {
	p.firstStep.via + p.firstStep.*nextStep.via
}
[/template]


[template public generateFacts(traceabilityContext : OclAny)]
fact {
	// test generation properties
	all p:Path | one c:Coverage | p in c.paths // all path belongs to a coverage
    all s:Step | one p:Path | s in p.firstStep.*nextStep // all steps belongs to a path

	// model consistency
	all p:Path | p.firstStep.from = Initial // all path starts with an Initial state
    all p:Path | one s:Step | s in steps['[' /]p[']' /] && s.to = End // all path end with End state
	
	// state machine properties
	all curr:Step, next:curr.nextStep | next.from = curr.to // all steps are contionueos
    all sys:System | some s:State | sys = s.system // all system belongs to a state
}
[/template]


[template public generateInheritSystem(traceabilityContext : OclAny)]
pred inheritSystem(s1, s2: System) {
	s1 = s2
}
[/template]


[template public generateStates(sm : StatemachineModule)]
one sig [for (state : AbstractState | sm.rootState.containedStates) separator (', ')][state.name /][/for] extends State {}
[/template]


[template public generateSystem(sm : StatemachineModule)]
some sig S extends System {
[for (variable : VariableDeclaration | sm.definedVariables) separator(',')]
[if (variable.type.toString().matches('BOOL'))]
	[variable.name /]: Bool
[elseif (variable.type.toString().matches('INT16') or variable.type.toString().matches('INT32'))]
	[variable.name /]: Int
[/if]	
[/for]
}
[/template]


[template public generateTransitions(sm : StatemachineModule, isTransitionCoverage : Boolean)]
[for (transition : Transition | sm.transitions) separator('\n')]
[if (isTransitionCoverage)]one [else]lone [/if]sig [transition.name /] extends Transition {}{
	from = [transition.from.name /]
	to = [transition.to.name /]
[if (transition.from.name.matches('Initial'))]
	initSystem['[' /]from.system[']' /]
[if (transition.trigger.oclIsUndefined())]
	inheritSystem['[' /]from.system, to.system[']' /]
[/if]
[else]
[if (transition.trigger.oclIsUndefined())]
	inheritSystem['[' /]from.system, to.system[']' /]
[/if]
[/if]
[if (not transition.trigger.oclIsUndefined())]
	[transition.trigger.name /]['[' /]from.system, to.system[']' /]
[/if]
[if (not transition.guard.oclIsUndefined())]
	G_[transition.name /]['[' /]from.system[']' /]
[/if]
}
[generateEvent(transition) /]
[generateGuard(transition) /]
[/for]
[/template]


[template public generateEvent(transition : Transition)]
[if (not transition.trigger.oclIsUndefined())]
pred [transition.trigger.name /](s1, s2: System) {
[if (transition.trigger.triggerExpression.oclIsTypeOf(ArithmeticOperation))]
[let operation : ArithmeticOperation = transition.trigger.triggerExpression.oclAsType(ArithmeticOperation)]
[if (operation.operator = BinaryArithmeticOperator::ADD)]
	s2.[operation.leftArgument.oclAsType(VariableRef).variable.name /] = add['[' /]s1.[operation.leftArgument.oclAsType(VariableRef).variable.name /], [operation.rightArgument.oclAsType(Constant).value /][']' /]	
[elseif (operation.operator = BinaryArithmeticOperator::SUBTRACT)]
	s2.[operation.leftArgument.oclAsType(VariableRef).variable.name /] = sub['[' /]s1.[operation.leftArgument.oclAsType(VariableRef).variable.name /], [operation.rightArgument.oclAsType(Constant).value /][']' /]
[else]
[if (operation.operator = BinaryArithmeticOperator::MULTIPLY)]
	s2.[operation.leftArgument.oclAsType(VariableRef).variable.name /] = mul['[' /]s1.[operation.leftArgument.oclAsType(VariableRef).variable.name /], [operation.rightArgument.oclAsType(Constant).value /][']' /]
[elseif (operation.operator = BinaryArithmeticOperator::DIVIDE)]
	s2.[operation.leftArgument.oclAsType(VariableRef).variable.name /] = div['[' /]s1.[operation.leftArgument.oclAsType(VariableRef).variable.name /], [operation.rightArgument.oclAsType(Constant).value /][']' /]
[/if]
[/if]
[/let]
[elseif (transition.trigger.triggerExpression.oclIsTypeOf(LogicOperation))]
[let operation : LogicOperation = transition.trigger.triggerExpression.oclAsType(LogicOperation)]
[if (operation.operator = LogicOperator::AND)]
	s2.[operation.arguments->at(1).oclAsType(VariableRef).variable.name /] = And['[' /]s1.[operation.arguments->at(1).oclAsType(VariableRef).variable.name /], [operation.arguments->at(2).oclAsType(Constant).value /][']' /]
[elseif (operation.operator = LogicOperator::OR)]
	s2.[operation.arguments->at(1).oclAsType(VariableRef).variable.name /] = Or['[' /]s1.[operation.arguments->at(1).oclAsType(VariableRef).variable.name /], [operation.arguments->at(2).oclAsType(Constant).value /][']' /]
[if (operation.operator = LogicOperator::XOR)]
	s2.[operation.arguments->at(1).oclAsType(VariableRef).variable.name /] = Xor['[' /]s1.[operation.arguments->at(1).oclAsType(VariableRef).variable.name /], [operation.arguments->at(2).oclAsType(Constant).value /][']' /]
[/if]
[/if]
[/let]
[/if]
}
[/if]
[/template]


[template public generateGuard(transition : Transition)]
[if (not transition.guard.oclIsUndefined())]
pred G_[transition.name /](s: System) {
[let operation : Comparison = transition.guard.oclAsType(Comparison)]
[if (operation.operator = ComparisonOperator::EQUALS)]
	s.[operation.leftArgument.oclAsType(VariableRef).variable.name /] = [operation.rightArgument.oclAsType(Constant).value /]
[elseif (operation.operator = ComparisonOperator::NOT_EQUALS)]
	s.[operation.leftArgument.oclAsType(VariableRef).variable.name /] != [operation.rightArgument.oclAsType(Constant).value /]
[else]
[if (operation.operator = ComparisonOperator::LESS_THAN)]
	s.[operation.leftArgument.oclAsType(VariableRef).variable.name /] < [operation.rightArgument.oclAsType(Constant).value /]
[elseif (operation.operator = ComparisonOperator::GREATER_THAN)]
	s.[operation.leftArgument.oclAsType(VariableRef).variable.name /] > [operation.rightArgument.oclAsType(Constant).value /]
[else]
[if (operation.operator = ComparisonOperator::LESS_EQ)]
	s.[operation.leftArgument.oclAsType(VariableRef).variable.name /] <= [operation.rightArgument.oclAsType(Constant).value /]
[elseif (operation.operator = ComparisonOperator::GREATER_EQ)]
	s.[operation.leftArgument.oclAsType(VariableRef).variable.name /] >= [operation.rightArgument.oclAsType(Constant).value /]
[/if]
[/if]
[/if]
[/let]
}
[/if]
[/template]


[template public generateInitSystem(sm : StatemachineModule)]
pred initSystem(s:System) {
[for (variable : VariableDeclaration | sm.definedVariables) separator('\n')]
	s.[variable.name /] = [variable.defaultValue.value /]
[/for]
}
[/template]