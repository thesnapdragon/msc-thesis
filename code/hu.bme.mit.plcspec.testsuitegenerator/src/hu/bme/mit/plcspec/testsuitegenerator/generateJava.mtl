[comment encoding = UTF-8 /]
[module generateJava('http:///hu/bme/mit/plcspec/alloygenerator/testing.ecore')]

[template public generateJava(testSuite : TestSuite)]
[comment @main/]
[file (testSuite.sutName + 'Test.java', false, 'UTF-8')]
package [testSuite.sutName.toLower() /];

import org.junit.Before;
import org.junit.Test;

import junit.framework.TestCase;

public class [testSuite.sutName /]Test extends TestCase {
	protected [testSuite.sutName /] [testSuite.sutName.toLower() /] = null;
	protected [testSuite.sutName /]TestAdapter adapter = null;
	   
	@Before 
	public void setUp() {
		[testSuite.sutName.toLower() /] = new [testSuite.sutName /]();
		adapter = new [testSuite.sutName /]TestAdapter([testSuite.sutName.toLower() /]);
	}

[for (testCoverage : TestCoverage | testSuite.testCoverages)]
	@Test
	public void testCoverage[i /]() {
[for (testCase : TestCase | testCoverage.testCases)]
		assertEquals(adapter.[testCase.input /](), [testCase.output /]);
[/for]
	}

[/for]
}
[/file]
[file (testSuite.sutName + 'TestRunner.java', false, 'UTF-8')]
package [testSuite.sutName.toLower() /];

import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

public class [testSuite.sutName /]TestRunner {
   public static void main(String['[' /][']' /] args) {
      Result result = JUnitCore.runClasses([testSuite.sutName /]Test.class);
      for (Failure failure : result.getFailures()) {
         System.out.println(failure.toString());
      }
      System.out.println(result.wasSuccessful());
   }
}
[/file]
[file (testSuite.sutName + 'TestAdapter.java', false, 'UTF-8')]
package [testSuite.sutName.toLower() /];

public class [testSuite.sutName /]TestAdapter {
	private [testSuite.sutName /] [testSuite.sutName.toLower() /] = null;

	public [testSuite.sutName /]TestAdapter([testSuite.sutName /] [testSuite.sutName.toLower() /]) {
    	this.[testSuite.sutName.toLower() /] = [testSuite.sutName.toLower() /];
	}

[for (transition : Transition | testSuite.adapter.transitions)]
	public [transition.type /] [transition.name /]() {
		return [testSuite.sutName.toLower() /].[transition.name /]();
	}

[/for]	
}
[/file]
[/template]
